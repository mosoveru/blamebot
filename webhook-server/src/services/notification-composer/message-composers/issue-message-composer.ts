import { ObjectTypes } from '../../../constants/enums';
import { EventChanges, MessageComposer, NotificationMessage } from '../../../types';

type ChangesForIssue = EventChanges<IssueMessageComposer['meantFor']>;
type UserInfo = {
  id: string;
  name: string;
};

export class IssueMessageComposer implements MessageComposer {
  readonly meantFor = ObjectTypes.ISSUE;

  composeMessage(changes: ChangesForIssue[]): NotificationMessage[] {
    const individualChanges = changes.filter((change) => change.instanceUserId);
    const commonChanges = changes.find((change) => change.isCommon)!;
    const notificationMessages: NotificationMessage[] = [];
    for (const eventChanges of individualChanges) {
      if (eventChanges.changes.forAssignee) {
        notificationMessages.push({
          instanceUserId: eventChanges.instanceUserId,
          message: this.composeMessageForIssueAssignee(eventChanges),
        });
      }
      if (eventChanges.changes.forAuthor) {
        notificationMessages.push({
          instanceUserId: eventChanges.instanceUserId,
          message: this.composeMessageForIssueAuthor(eventChanges),
        });
      }
    }
    notificationMessages.push({
      message: this.composeCommonMessageForIssue(commonChanges),
    });
    return notificationMessages;
  }

  private composeBaseIssuePhrase(eventChanges: ChangesForIssue): string {
    return `<a href="${eventChanges.objectUrl}">Issue #${eventChanges.objectId}</a> –≤ –ø—Ä–æ–µ–∫—Ç–µ <a href="${eventChanges.projectUrl}">${eventChanges.projectName}</a>`;
  }

  private composeMessageForIssueAssignee(eventChanges: ChangesForIssue): string {
    const preparedCommonMessage: string[] = [];
    const basePhrase = this.composeBaseIssuePhrase(eventChanges);
    preparedCommonMessage.push(`–í –í–∞—à–µ–º ${basePhrase} `);
    if (eventChanges.changes.isNewAssignment || eventChanges.changes.isNewObject?.isNewAssignment) {
      return `–ù–∞ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∞–ª–∏ –Ω–æ–≤–æ–µ ${basePhrase}`;
    }
    if (eventChanges.changes.isUnassigned) {
      return `–í—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –≤ ${basePhrase}`;
    }
    if (eventChanges.changes.isClosed) {
      return `–í–∞—à–∞ ${basePhrase} –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞`;
    }
    if (eventChanges.changes.isReopened) {
      return `–í–∞—à–∞ ${basePhrase} <b>—Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç–∞</b>`;
    }
    if (eventChanges.changes.newComment) {
      return `–í –≤–∞—à–µ–º ${basePhrase} –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.`;
    }
    if (eventChanges.changes.isNewObject?.isNewAssignmentWithDeadline) {
      const date = eventChanges.changes.isNewObject?.isNewAssignmentWithDeadline.deadline;
      return `–ù–∞ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∞–ª–∏ –Ω–æ–≤–æ–µ ${basePhrase} —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –¥–æ <b>${date}</b>`;
    }
    if (eventChanges.changes.isEmojiChanged) {
      return `–í –≤–∞—à–µ–º ${basePhrase} ${this.composeStringForEmojiChanges(eventChanges)}`;
    }
    this.listMinorChanges(eventChanges, preparedCommonMessage);
    return preparedCommonMessage.join('').replace(/,\s$/, '.');
  }

  private composeMessageForIssueAuthor(eventChanges: ChangesForIssue): string {
    const preparedCommonMessage: string[] = [];
    const basePhrase = this.composeBaseIssuePhrase(eventChanges);
    preparedCommonMessage.push(`–í –í–∞—à–µ–º ${basePhrase} `);
    if (eventChanges.changes.isNewAssignment || eventChanges.changes.isNewObject?.isNewAssignment) {
      return `–í –í–∞—à–µ–º ${basePhrase} –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å`;
    }
    if (eventChanges.changes.isClosed) {
      return `–í–∞—à–∞ ${basePhrase} –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞`;
    }
    if (eventChanges.changes.isReopened) {
      return `–í–∞—à–∞ ${basePhrase} <b>—Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç–∞</b>`;
    }
    if (eventChanges.changes.newComment) {
      return `–í –≤–∞—à–µ–º ${basePhrase} –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.`;
    }
    if (eventChanges.changes.isNewObject?.isNewAssignmentWithDeadline) {
      const date = eventChanges.changes.isNewObject?.isNewAssignmentWithDeadline.deadline;
      return `–í –í–∞—à–µ–º ${basePhrase} –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–µ–¥–ª–∞–π–Ω –¥–æ <b>${date}</b>`;
    }
    if (eventChanges.changes.isEmojiChanged) {
      return `–í –≤–∞—à–µ–º ${basePhrase} ${this.composeStringForEmojiChanges(eventChanges)}`;
    }
    this.listMinorChanges(eventChanges, preparedCommonMessage);
    return preparedCommonMessage.join('').replace(/,\s$/, '.');
  }

  private composeCommonMessageForIssue(eventChanges: ChangesForIssue): string {
    const preparedCommonMessage: string[] = [];
    const basePhrase = this.composeBaseIssuePhrase(eventChanges);
    preparedCommonMessage.push(`–í —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å –í–∞–º–∏ ${basePhrase} `);
    if (eventChanges.changes.isNewAssignment || eventChanges.changes.isNewObject?.isNewAssignment) {
      preparedCommonMessage.push(`–±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, `);
    }
    if (eventChanges.changes.isNewObject?.isNewAssignmentWithDeadline) {
      const date = eventChanges.changes.isNewObject?.isNewAssignmentWithDeadline.deadline;
      preparedCommonMessage.push(`—Å–º–µ–Ω–∏–ª—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –¥–æ–±–∞–≤–∏–ª—Å—è –¥–µ–¥–ª–∞–π–Ω –¥–æ <b>${date}</b>, `);
    }
    if (eventChanges.changes.isClosed) {
      return `–°–≤—è–∑–∞–Ω–Ω–æ–µ —Å –í–∞–º–∏ ${basePhrase} –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ`;
    }
    if (eventChanges.changes.isReopened) {
      return `–°–≤—è–∑–∞–Ω–Ω–æ–µ —Å –í–∞–º–∏ ${basePhrase} <b>—Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã–ª–æ—Å—å</b>`;
    }
    if (eventChanges.changes.newComment) {
      return `–í —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å –≤–∞–º–∏ ${basePhrase} –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.`;
    }
    if (eventChanges.changes.isEmojiChanged) {
      return `–í —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å –≤–∞–º–∏ ${basePhrase} ${this.composeStringForEmojiChanges(eventChanges)}`;
    }
    this.listMinorChanges(eventChanges, preparedCommonMessage);
    return preparedCommonMessage.join('').replace(/,\s$/, '.');
  }

  private listMinorChanges(eventChanges: ChangesForIssue, preparedCommonMessage: string[]) {
    if (eventChanges.changes.isDescriptionChanged) {
      preparedCommonMessage.push('–±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ, ');
    }
    if (eventChanges.changes.isTitleChanged) {
      preparedCommonMessage.push('–±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫, ');
    }
    if (eventChanges.changes.isAssigneesChanges) {
      const newAssignees = eventChanges.changes.isAssigneesChanges.added;
      const deletedAssignees = eventChanges.changes.isAssigneesChanges.deleted;
      const sentence = this.composeStringForAssigneesChanges(newAssignees, deletedAssignees);
      preparedCommonMessage.push(sentence);
      if (eventChanges.changes.isAssigneesChanges.deletedWithoutInfo) {
        preparedCommonMessage.push(' –∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏');
      }
    }
    if (eventChanges.changes.isLabelsChanged) {
      const addedLabels = eventChanges.changes.isLabelsChanged.added;
      const deletedLabels = eventChanges.changes.isLabelsChanged.deleted;
      const sentence = this.composeStringForLabelChanges(addedLabels, deletedLabels);
      preparedCommonMessage.push(sentence);
    }
    if (eventChanges.changes.isDueDateChanged) {
      const dueDateChanges = eventChanges.changes.isDueDateChanged;
      if (dueDateChanges.isAdded) {
        const sentence = this.composeStringForDueDateChanges('added', dueDateChanges.isAdded.due_date);
        preparedCommonMessage.push(sentence);
      }
      if (dueDateChanges.isUpdated) {
        const sentence = this.composeStringForDueDateChanges('updated', dueDateChanges.isUpdated.due_date);
        preparedCommonMessage.push(sentence);
      }
      if (dueDateChanges.isDeleted) {
        const sentence = this.composeStringForDueDateChanges('deleted');
        preparedCommonMessage.push(sentence);
      }
    }
  }

  private composeStringForEmojiChanges(emojiChanges: ChangesForIssue): string {
    const isAdded = emojiChanges?.changes.isEmojiChanged?.isAdded;
    const isDeleted = emojiChanges?.changes.isEmojiChanged?.isDeleted;

    const emojiActionsMap: Record<string, string> = {
      isEmojiThumbUp: '–ª–∞–π–∫',
      isEmojiThumbDown: '–¥–∏–∑–ª–∞–π–∫',
      isEmojiClown: '–∫–ª–æ—É–Ω–∞ ü§°',
    };

    const actionPrefix = isAdded ? '–ø–æ—Å—Ç–∞–≤–∏–ª–∏' : '—É–±—Ä–∞–ª–∏';
    const emojiChange = isAdded ?? isDeleted;

    if (emojiChange) {
      for (const [key, label] of Object.entries(emojiActionsMap)) {
        if (emojiChange[key as keyof typeof emojiChange]) {
          return `${actionPrefix} ${label}.`;
        }
      }
      return `${actionPrefix} —Å–º–∞–π–ª–∏–∫.`;
    }

    return '';
  }

  private composeStringForDueDateChanges(type: 'updated' | 'added' | 'deleted', date?: string) {
    if (type === 'updated') {
      return `–¥–µ–¥–ª–∞–π–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ <b>${date}</b>, `;
    } else if (type === 'added') {
      return `–±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –¥–µ–¥–ª–∞–π–Ω –¥–æ <b>${date}</b>, `;
    } else {
      return `–¥–µ–¥–ª–∞–π–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω, `;
    }
  }

  private composeStringForLabelChanges(addedLabels?: string[], deletedLabels?: string[]): string {
    const phrases: string[] = [];

    if (addedLabels?.length) {
      const single = addedLabels.length === 1;
      phrases.push(
        `${single ? '–±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω' : '–±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã'} ${single ? '–ª–µ–π–±–ª' : '–ª–µ–π–±–ª—ã'} ${addedLabels.join(', ')}`,
      );
    }

    if (deletedLabels?.length) {
      const single = deletedLabels.length === 1;
      phrases.push(
        `${single ? '–±—ã–ª —É–¥–∞–ª—ë–Ω' : '–±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã'} ${single ? '–ª–µ–π–±–ª' : '–ª–µ–π–±–ª—ã'} ${deletedLabels.join(', ')}`,
      );
    }

    if (!phrases.length) {
      return '';
    }

    return `${phrases.join(' –∏ ')}.`;
  }

  private joinUserNames(users: UserInfo[]) {
    return users.map((u) => u.name).join(', ');
  }

  private composeStringForAssigneesChanges(addedAssignees?: UserInfo[], deletedAssignees?: UserInfo[]) {
    const sentenceParts: string[] = [];
    const hasAdded = addedAssignees && addedAssignees.length > 0;
    const hasDeleted = deletedAssignees && deletedAssignees.length > 0;

    if (hasAdded) {
      sentenceParts.push(
        addedAssignees!.length === 1 ? '–±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ' : '–±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ ',
        this.joinUserNames(addedAssignees!),
      );
    }

    if (hasDeleted) {
      if (hasAdded) {
        sentenceParts.push('–∏ ');
      }
      sentenceParts.push(
        deletedAssignees!.length === 1 ? '–ø–µ—Ä–µ—Å—Ç–∞–ª –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º ' : '–ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ ',
        this.joinUserNames(deletedAssignees!),
      );
    }

    return sentenceParts.join('');
  }
}
