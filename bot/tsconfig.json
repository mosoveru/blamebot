{
  "compilerOptions": {
    "module": "commonjs",                                /* Specify what module code is generated. */
    "target": "esnext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "baseUrl": "./src",                                  /* Specify the base directory to resolve non-relative module names. */
    "outDir": "dist",
    "paths": {
      "@entities": ["entities"],
      "@exceptions": ["exceptions"],
      "@config": ["config"],
      "@types": ["types"],
      "@services": ["services"],
      "@middlewares": ["middlewares"],
      "@composers": ["composers"],
      "@constants": ["constants"],
      "@conversations": ["conversations"]
    },                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
    "strict": true,                                      /* Enable all strict type-checking options. */
    "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    "strictPropertyInitialization": false,             /* Check for class properties that are declared but not set in the constructor. */
    "types": ["node", "node-fetch"],
    "plugins": [
      { "transform": "typescript-transform-paths" }
    ]
  },
  "include": ["src"],
  "ts-node": {
    "require": ["tsconfig-paths/register"]
  },
  "tsc-alias": {
    "verbose": true,
    "resolveFullPaths": true
  }
}
